# syntax=docker/dockerfile:1
FROM ubuntu:18.04 as base
# labels
LABEL author="Stephan Meighen-Berger"
LABEL version="1.0"
LABEL description="Image for Prometheus - New Kernel"
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && \
    apt-get -y --no-install-recommends install \
    build-essential \
    gcc \
    g++ \
    git \
    libssl-dev \
    python3-dev \
    ca-certificates \
    wget libgsl-dev pkg-config libhdf5-serial-dev libboost-all-dev python-dev && \
    # apt-get install libboost-all-dev && \
    rm -rf /var/lib/apt/lists/*
RUN wget https://github.com/Kitware/CMake/releases/download/v3.22.2/cmake-3.22.2.tar.gz --no-check-certificate && \
    tar -zxvf cmake-3.22.2.tar.gz && \
    cd cmake-3.22.2 && ./bootstrap && make -j4 && make install
FROM base as python
ENV PATH="/opt/miniconda3/bin:${PATH}"
ARG PATH="/opt/miniconda3/bin:${PATH}"
RUN cd /opt &&\
    wget \
    https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --no-check-certificate\
    && mkdir /opt/.conda \
    && bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3\
    && rm -f Miniconda3-latest-Linux-x86_64.sh
# Python > 3.10 breaks current pybinding of LI
# RUN conda install python=3.9
RUN conda install python=3.9
RUN conda install pip
RUN python -m pip install --upgrade pip
# change conan install .. -o with_python=True to conan install .. -o with_python=True -o boost:extra_b2_flags=define=BOOST_FILESYSTEM_DISABLE_STATX for old kernels
# Problems with conan autamtic versions
RUN python -m pip install conan==1.59.0 && \
    conan profile new default --detect && conan profile update settings.compiler.libcxx=libstdc++11 default && \
    mkdir /opt/PROPOSAL && cd /opt/PROPOSAL && \
    git clone https://github.com/tudo-astroparticlephysics/PROPOSAL.git . && \
    mkdir -p build && cd build && conan install .. -o with_python=True &&\
    conan build ..
FROM python as base_tables
COPY build_proposal_tables.py /opt/PROPOSAL/build_proposal_tables.py
RUN PYTHONPATH=$PYTHONPATH:/opt/PROPOSAL/build/src/pyPROPOSAL python /opt/PROPOSAL/build_proposal_tables.py
FROM base_tables as leptoninjector
RUN conda install -c conda-forge photospline && \
    mkdir /opt/LI && cd /opt/LI && \
    git clone -b with_earth_py https://github.com/icecube/LeptonInjector.git && \
    mv LeptonInjector source && mkdir build && mkdir install && \
    cd build && cmake -DCMAKE_INSTALL_PREFIX=../install ../source && \
    make -j4 && make install
FROM leptoninjector as ppc
RUN cd /opt && mkdir PPC && \
    cd PPC && \
    wget https://user-web.icecube.wisc.edu/~dima/work/WISC/ppc/bkp/gpu.tgz && \
    tar -xzf gpu.tgz && mv gpu PPC && \
    wget https://user-web.icecube.wisc.edu/~dima/work/WISC/ppc/bkp/dat.tgz && \
    tar -xzf dat.tgz && \
    cd PPC && \
    mv ../dat/wham/rnd.txt . && \
    mv ../dat/wham/geo-f2k . && \
    mv ../dat/wham/icemodel.dat . && \
    mv ../dat/wham/wv.dat . && \
    mv ../dat/wham/as.dat . && \
    mv ../dat/wham/cfg.txt . && \
    mv ../dat/wham/icemodel.par . && \
    # correcting some errors in the file
    sed -i 's/if(flag) flag=/if(flag) flag=static_cast<bool>/g' ini.cxx && \
    make cpu && cd /home 
FROM ppc as pip_stuff
RUN python -m pip install --upgrade pip && \
    python -m pip install torch-geometric jupyterlab awkward numba seaborn tqdm ipywidgets aquirdturtle_collapsible_headings plotly && \
    python -m pip install matplotlib_inline Geometry3D flake8 h5py scipy distrax==0.1.3 dm-haiku==0.0.5&& \
    python -m pip install optax uproot && pip install schema fsspec
ADD "https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h" skipcache
RUN python -m pip install fennel_seed[cpu]
RUN conda install -c conda-forge pyarrow
FROM pip_stuff as pathing_stuff
ENV PATH=${PATH}:/usr/local/lib/nodejs/node-v14.17.0-linux-x64/bin:/opt/miniconda3/bin:
ENV PYTHONPATH=${PYTHONPATH}:/opt/PROPOSAL/build/src/pyPROPOSAL:/workspaces/repos/hyperion:/workspaces/repos/olympus
ENV LD_LIBRARY_PATH=/opt/LI/install/lib
ENV PPC=/opt/PPC/PPC/ppc
ENV PPC_CUDA=/opt/PPC/PPC_CUDA/ppc
RUN echo "export PATH=/usr/local/lib/nodejs/node-v14.17.0-linux-x64/bin:${PATH}" >> /root/.bashrc && \
    echo "export PYTHONPATH=${PYTHONPATH}:/opt/PROPOSAL/build/src/pyPROPOSAL:/workspaces/repos/hyperion:/workspaces/repos/olympus" >> /root/.bashrc && \
    echo "export LD_LIBRARY_PATH=/opt/LI/install/lib" >> /root/.bashrc && \
    echo "export EARTH_PARAMS=/opt/LI/source/resources/earthparams/" >> /root/.bashrc && \
    echo "export PPC=/opt/PPC/PPC/ppc" >> /root/.bashrc && \
    echo "export PPC_CUDA=/opt/PPC/PPC_CUDA/ppc" >> /root/.bashrc && \
    cd /bin && cp /root/.bashrc .bashrc && \
    cd /opt && cp /root/.bashrc .bashrc

# Create some non-root user that owns the data and other directories by default
RUN useradd -r myuser          # no specific user ID
RUN mkdir /home/myuser
RUN cd /home/myuser cp /root/.bashrc .bashrc
RUN chown -R myuser /home/myuser
USER myuser
SHELL ["/bin/bash", "-c"]
ENTRYPOINT [ "/bin/bash" ]
